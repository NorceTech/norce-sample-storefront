@using Model.Commerce.Shopping
@model IPaymentResponse
<div class="page-breadcrumb">
    <div class="container">
        <h4>Shopping cart</h4>
    </div>
</div>
<div class="space-60"></div>
<div class="container" id="checkout">
    <div class="table-responsive">
        <table class="table table-bordered cart-table">
            <thead>
                <tr>
                    <th></th>
                    <th>Product Name</th>
                    <th>Price</th>
                    <th>Quantity</th>
                </tr>
            </thead>
            <tbody>
                <template v-for="row in info.basket.items">
                    <tr>
                        <td class="item-thumb">
                            <img v-bind:src="row.imageUrl+'?w=60&h=60'" alt="" width="90">
                        </td>
                        <td class="item-name">
                            <h4><a v-bind:href="'/Product/Show/'+row.url">{{ row.name }}</a></h4>
                        </td>
                        <td class="item-price">
                            <h4>{{ row.price * row.vatRate }}</h4>
                            <span v-if="row.pricePrevious" style="text-decoration: line-through;">{{ row.pricePrevious * row.vatRate }}</span>
                        </td>
                        <td class="item-count" style="width: 120px">
                            <div class="count-input">
                                {{ row.quantity }}
                            </div>
                        </td>
                    </tr>
                </template>

            </tbody>
        </table>
    </div><!--end cart table-->
    <hr>
    <ul class="list-unstyled text-right cart-subtotal-list">
        <li>
            Subtotal
            <span>{{ info.basket.totalInclVat - info.basket.shippingInclVat }}</span>
        </li>
        <li>
            Shipping Charge
            <span>{{ info.basket.shippingInclVat }}</span>
        </li>
        <li>
            Total
            <span class="lead">{{ info.basket.totalInclVat }}</span>
        </li>
    </ul> <hr>
    <div class="space-10"></div>
    <div class="row">
        <div class="col-sm-6 margin-b-10">
            <div class="input-group">
                <ul class="list-unstyled">
                    <template v-for="row in info.deliveryMethods">
                        <li>
                            <template v-if="row.isSelected">
                                <input type="radio" class="icheck" name="deliveryMethod" checked v-bind:onclick="'checkout.setDeliveryMethod(\''+row.externalId+'\')'" />
                            </template>
                            <template v-if="!row.isSelected">
                                <input type="radio" class="icheck" name="deliveryMethod" v-bind:onclick="'checkout.setDeliveryMethod(\''+row.externalId+'\')'" />
                            </template>
                            {{ row.externalId }} {{ row.name }}
                        </li>
                    </template>
                </ul>
            </div>
        </div>

    </div>

   
</div>

<div class="space-60"></div>
<div class="row">
    <div class="col-sm-12 margin-b-10">
        <!-- This is the FORM CHECKOUT IFrame -->
        @Html.Raw(Model.Html)
        <!-- /This is the FORM CHECKOUT IFrame -->
    </div>
</div>
@section scripts {
    <script language="JavaScript">
        /* SAMPLE CODE for Klarna */
        function pauseFormCheckout() {
            //if( Model.FormCheckoutProvider == "KCOv3" ) { 
            window._klarnaCheckout(function (api) {
                api.suspend();
            });
            //}
        }
        function resumeFormCheckout() {
            window._klarnaCheckout(function (api) {
                api.resume();
            });
        }


        var checkout = new Vue({
            el: '#checkout',
            data() {
                return {
                    info: {
                        basket: { items: [] }
                    },
                    paymentform: { html: '' }
                }
            },
            mounted() {
                axios
                    .get('/Basket/CheckoutJson')
                    .then(response => (this.info = response.data))
            },
            methods: {
                refresh: function () {
                    axios
                        .get('/Basket/Minicart')
                        .then(response => (this.info = response.data))
                },
                setDeliveryMethod: function (deliveryMethodId) {
                    pauseFormCheckout();
                    axios
                        .get('/Basket/SetDeliveryMethod?deliveryMethodId=' + deliveryMethodId)
                        .then(response => (this.info = response.data))
                        .then(x => { resumeFormCheckout() })
                        
                }
            }
        });
    </script>
}